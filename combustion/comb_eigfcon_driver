import sys

import bin.EvansDF
np = bin.EvansDF.np

from combustion_profilesolver import profilesolver
import pickle

# 
# Parameters
# 

p={'beta':3.5,'tau': 0.1,'temp_n':100}
p['rooot'] = 0.000025218 # beta = 10.0

# 
# Structure variables
# 

s={'I':16};s['R'] = s['I']; s['L'] = -2.0*s['I']
s['rarray'] = range(0,4) # 1:4
s['larray'] = range(4,8) # 5:8
s['Grarray'] = range(0,8) # 1:8
s['Glarray'] = range(8,16) # 9:16
s['UL'] = [1.0/p['beta'],0,0,0]; s['UR'] = [0, 0, 0, 0]; s['n'] = 4; 

s['PFunctions'] = 'combustion.combustionEvans' # Must be called before calling emcset
[s,e,m,c] = bin.EvansDF.emcset(s,'front',2,2,'reg_reg_polar')
m['method'] = bin.EvansDF.EvansBin.mod_drury; m['options'] = {'RelTol':1e-8,'AbsTol':1e-9}
p['temp_n'] = 40

s['side']=1
s['flag'] = 'NA' # Used to notify profilesolver if it is restarting with saved data


# 
# Profile computation; Continuation of traveling wave
# 
s['flag'] = 'restarting'
File = open('combustion/combustion_Data/restart_combustion.pkl','rb')
comb_Dict = pickle.load(File)
p['beta'] = comb_Dict['beta']
s['I'] = comb_Dict['I']
s['R'] = s['I']; s['L'] = -s['I']

s['UL'] = [1.0/p['beta'],0,0,0]
s['solution'] = comb_Dict['solution']
p['speed'] = s['solution'](0)[3]


s['eigf']=False
# s['eigf']=True
# s, x1, x2 = bin.EvansDF.eigf_init_guess(s,e,m,c,p)


n=s['n'] # = 4 = Dimension of first order profile equation
eig_n = 2*n # = 8 = Dimension of first order eigenfunction equation

if s['eigf']:
	s['guess'] = np.concatenate( ( np.real(s['guess'][0:n,:]),
		np.imag(s['guess'][0:n,:]),
		np.real(s['guess'][n:eig_n,:]),
		np.imag(s['guess'][n:eig_n,:]),
		np.array([np.real(s['guess'][eig_n,:]) ]),
		np.array([np.imag(s['guess'][eig_n,:]) ]) ),
		axis=0 )
		
	s['ph'] = np.array([[0,s['guess'][0,0] ],
				   [4,s['guess'][4,0] ] ])
	print "Hello s['guess'] World", 
	print "s['guess'].shape = ", s['guess'].shape
	
del n,eig_n

s,p,solution, problem = profilesolver(s,p)


"""
 
s['gsol'] = comb_eigprofilesolver(s,p,s)
lmbda = s.gsol.y(17,end) + 1i*s.gsol.y(18,end)
 

#####################################################
#####################################################
 
# 
# Continuation of traveling wave and eigenfunction simultaneously
# 
 
s.sol = profile(s,p,s_new);
 
s_old=s;
s_new=s;
s_new.order(1)=1;
beta_vals=10.25:.05:17.05;
 
Roots = zeros( size(length(beta_vals),2) );
for j=1:length(beta_vals)
    p.beta=beta_vals(j)
    s_old['phase']=0.5*(s_old['UL']+s_old['UR'])
    s_new['UL']=[1.0/p['beta'];0;0;0]
    s_new['phase']=0.5*(s_new.UL+s_new['UR'])
    s_new['L']=-8.4*np.exp(0.54*p['beta'])
    s_new['R']=-s_new['L']
 
    s_new['GR'] = s_new['R'];
    s_new['GL'] = s_new['L']
    
    s_new['sol'] = profile(s_new,p,s_old)
    p['speed']=s_new.sol.y(8,end)
    s_new['gsol'] = comb_eigprofilesolver(s_new,p,s_old)
    s_old=s_new
    lmbda = s_new.gsol.y(17,end) + 1i*s_new.gsol.y(18,end)
    Roots(j,1) = p['beta']
    Roots(j,2) = lmbda
    Roots(j,3) = s_new['R'] 
    save combustion
end
s=s_new;
 
 """ 
