import sys
from combustion.pse_comb import profilesolver
import combustion.pse_comb as CProf_Solver
import pickle
import bin.EvansDF
np = bin.EvansDF.np
import bin.EvansBin as EvansBin
from scipy import linalg

def plot_this_profile(solution, interval,n_points,filestring,s):
	import pylab
	x = np.linspace(interval[0],interval[1], n_points)
	y1 = solution(x)
	y2 = solution(-x)

	n = s['n']
	fig = pylab.figure() 
	for j in range(0,n):
		pylab.plot(x, y1,'k')
		pylab.plot(np.flipud(-x),np.flipud(y2) ,'k')
		
	format = '.eps'
	fig.savefig('Testing/'+filestring+format)
	pylab.show()
	return 0
	
def func_init():
	import pylab
	#
	# Parameters 
	# 
	p={'beta':3.5,'tau': 0.1,'temp_n':200,'rooot':1e-4*(.12375+ 6.3313j)} #'rooot' for beta = 7.1
	
	#
	# Structure variables
	# 
	s={'I':16.0,'R':16.0,'L':-32.0}; #s['R'] = s['I']; s['L'] = -2.0*s['I']
	s['rarray'] = range(0,4) # 1:4
	s['larray'] = range(4,8) # 5:8
	s['Grarray'] = range(0,8) # 1:8
	s['Glarray'] = range(8,16) # 9:16
	s['n'] = 4; s['side']=1
	
	s['PFunctions'] = 'combustion.Evans_comb' # Must be called before calling emcset
	[s,e,m,c] = bin.EvansDF.emcset(s,'front',2,2,'reg_reg_polar')
# 	print 'e = ', e
	m['method'] = bin.EvansDF.EvansBin.mod_drury; m['options'] = {'RelTol':1e-8,'AbsTol':1e-8}
	
	''' Profile computation; Continuation of traveling wave. '''
	s['flag'] = 'NA' 
# 	s['flag'] = 'restarting'
# 	File = open('combustion/combustion_Data/restart_combustion.pkl','rb')
# 	comb_Dict = pickle.load(File)
# 	p['beta'] = comb_Dict['beta']
# 	s['I'] = comb_Dict['I']; 
# 	s['R'] = 8.4*np.exp(0.54*p['beta']);  s['L'] = -s['R']
# 	s['solution'] = comb_Dict['solution']
# 	p['speed'] = s['solution'](0)[3]

# 	s['eigf']=False

	s['eigf']=True;  
# 	s, x1, x2 = bin.EvansDF.eigf_init_guess(s,e,m,c,p)
	
# Inputs initial guess from Matlab
##########################################################################
	input = open(r'../stablab20/Continuation_Testing/matlab/eigf_guess_real.txt','r')
	aList = input.readlines()
	s['matlab_guess'] = np.zeros((9,p['temp_n']),dtype='complex')
	for j in range(0,p['temp_n']):
		line = aList[j].rstrip().split()
		for k in range(0,9):
			s['matlab_guess'][k,j] = np.float64(line[k])  

	input = open(r'../stablab20/Continuation_Testing/matlab/eigf_guess_imag.txt','r')
	aList = input.readlines()
	for j in range(0,p['temp_n']):
		line = aList[j].rstrip().split()
		for k in range(0,9):
			s['matlab_guess'][k,j] = s['matlab_guess'][k,j] + 1j*np.float64(line[k])  
	np.set_printoptions(precision=12)
	s['guess'] = s['matlab_guess']
	print "s['guess'] = ", s['guess'].shape
	print "s['matlab_guess'] = ", s['matlab_guess'].shape
	
##############################################################################
	
# 	if s['eigf']:
# 		fig = pylab.figure() 
# 		for j in range(0,m['n']):
# 			pylab.plot(x1,np.flipud(np.real(s['guess'][j+m['n'],:])) ,'k')
# 			pylab.plot(np.flipud(x2), np.real(s['guess'][j,:]),'k')
# 	
# 		pylab.title('Eigenfunction for the combustion equation')
# 		pylab.xlabel('x'); pylab.ylabel('W (Initial Guess: Hello)'); 
# 		format = '.eps'
# 		fig.savefig('combustion/combustion_Data/'+'combustion_eigenfunction_guess'+format)
# 	
# 		n=s['n']; eig_n = 2*n
# 		s['guess'] = np.concatenate( ( np.real(s['guess'][0:n,:]),
# 			np.imag(s['guess'][0:n,:]),
# 			np.real(s['guess'][n:eig_n,:]),
# 			np.imag(s['guess'][n:eig_n,:]),
# 			np.array([np.real(s['guess'][eig_n,:]) ]),
# 			np.array([np.imag(s['guess'][eig_n,:]) ]) ),
# 			axis=0 )
# 			
# 		s['ph'] = np.array([[0,s['guess'][0,0] ],
# 					   [4,s['guess'][4,0] ] ])
# 		del n,eig_n

	return s,p
	

s,p = func_init()

s,p,solution, problem = profilesolver(s,p)












































# lmbda = 2-2.0j
# s = {'temp':[1,2-2.0j,3+1.0j,4],'n':4,'I':16.0,'R':32.0,'L':-32.0}
# p = {'speed': 2.323,'beta':3.5,'tau':0.1}
# x = 13
# y =    np.array([1,2,0,4,-.7,-1.5,-2,-1,2,3,4,-.3,-1,2.6,-1,1+1.2,-3,2])
# Ya =    y
# Yb =   y
# s['y'] = [1,5,3,4]
# s['ph'] = np.array([[0,3],[4,-2]])


def AA(x,lmbda,s,p):

# 	temp = s['temp']
	temp = s['y']
	v = np.zeros(4)
	v[0]=temp[0]
	v[1]=temp[1]
	v[3]=temp[2]
	p['speed']
	v[2]= (1.0/p['speed'])*(p['speed']-p['beta']*p['speed']*temp[0]-p['beta']*v[1]-p['tau']*temp[2])

	if (v[0]!=0.0): 
		e = np.exp(-1.0/v[0]) 
	else: e=0

	vu2 = (1.0*v[2])/(v[0]**2)
	
	a21 = (lmbda - vu2*e) 
	a23 = -e
	a41 = (p['beta']*vu2*e/p['tau'])

	a43 = (lmbda + p['beta']*e)/(1.0*p['tau'])
	a44 = (-p['speed']/p['tau'])
	
	out = np.array([[0.0,        1.0,        0.0,        0.0],
		[a21,      -p['speed'],       a23,      0.0],
		[0.0,        0.0,        0.0,        1.0],
		[a41,      0.0,        a43,      a44]],dtype=complex)

	return out

def eeigf_F(x,y,s,p):

	n=s['n'] # = 4 = Dimension of first order profile equation
	eig_n = 2*n # = 8 = Dimension of first order eigenfunction equation

	out = np.concatenate( 
		(np.real( (s['R']/s['I'])*AA((s['R']/s['I'])*x,(y[-2] + 1.0j*y[-1]),s,p).dot( 
		np.array([y[0:n] + 1.0j*y[n:eig_n] ]).T ) ),
		np.imag( (s['R']/s['I'])*AA((s['R']/s['I'])*x,(y[-2] + 1.0j*y[-1]),s,p).dot( 
		np.array([y[0:n] + 1.0j*y[n:eig_n] ]).T) ),
		np.real( (s['L']/s['I'])*AA((s['L']/s['I'])*x,(y[-2] + 1.0j*y[-1]),s,p).dot( 
		np.array([y[eig_n:eig_n+n] + 1.0j*y[eig_n+n:2*eig_n] ]).T) ),
		np.imag( (s['L']/s['I'])*AA((s['L']/s['I'])*x,(y[-2] + 1.0j*y[-1]),s,p).dot( 
		np.array([y[eig_n:eig_n+n] + 1.0j*y[eig_n+n:2*eig_n] ]).T) ) 
		),
		axis=0)

		
	out = list(out[:,0]); out.append(0.0); out.append(0.0)
# 	print out
# 	print "here x = ", x
# 	print "np.max(np.abs(out)) = ", np.max(np.abs(out))
	return np.array(out)




def eigf_boundary_conditions(Ya,Yb,s,p):
	n=s['n'] # = 4 = Dimension of first order profile equation
	eig_n = 2*n # = 8 = Dimension of first order eigenfunction equation
	ph = s['ph']
	AM = AA(s['L'], ((Ya[-2] + 1.0j*Ya[-1]) + (Yb[-2] + 1.0j*Yb[-1]))/2.0,s,p)
	AP = AA(s['R'], ((Ya[-2] + 1.0j*Ya[-1]) + (Yb[-2] + 1.0j*Yb[-1]))/2.0,s,p)
	
	print 'AM = ',AM
	print 'AP = ', AP
	print ; 
	P1,Q1 = EvansBin.projection2(AM,-1,1e-6); LM = linalg.orth(P1.T)
	P2,Q2 = EvansBin.projection2(AP,+1,1e-6); LP = linalg.orth(P2.T)
	#Fixed previous two lines
	print 'LM = ', LM
	print 'LP = ', LP
	print ; 
# 	try:
# 		P1,Q1 = EvansBin.projection2(AM,-1,1e-6); LM = linalg.orth(P1)
# 		P2,Q2 = EvansBin.projection2(AP,+1,1e-6); LP = linalg.orth(P2)
# 	except ValueError:
# 		print ; print ; print 's = ',s 
# 		print ; print ; print 'p = ',p ; print ; print ; 
# 		print ; print ; print 'AM = ',AM ; print ; print ; 
# 		print ; print ; print 'AP = ',AP ; print ; print ; 

	BCa = list(Ya[0:eig_n]-Ya[eig_n:2*eig_n]) # 8 matching conditions
	BCa.append( Ya[ph[0,0]]- ph[0,1] )      # 2 phase conditions
	BCa.append( Ya[ph[1,0]]- ph[1,1] )
# 	print 'Ya = ',Ya
# 	print 'Yb = ', Yb
# 	print Ya[ph[0,0]]- ph[0,1] 
# 	print Ya[ph[1,0]]- ph[1,1]
	# 8 projective conditions
	BCb1 = np.real( LP.T.dot(
	Yb[0:n]+ 1.0j*Yb[n:2*n]  ) )
# 	print Yb[0:n]+ 1.0j*Yb[n:2*n] 
# 	print LP.T
	print BCb1
	BCb2 = np.imag(LP.T.dot(
	Yb[0:n] + 1.0j*Yb[n:2*n]  ) )
	print BCb2
	BCb3 = np.real(LM.T.dot(
	Yb[eig_n:eig_n+n] + 1.0j*Yb[eig_n+n:eig_n+2*n]  ) )
	BCb4 = np.imag(LM.T.dot(
	Yb[eig_n:eig_n+n] + 1.0j*Yb[eig_n+n:eig_n+2*n]  ) )

	BCb = np.concatenate((BCb1,BCb2,BCb3,BCb4),axis = 0)
	
	return np.array(BCa,dtype = float), np.array(BCb,dtype = float)

# print eeigf_F(x,y,s,p)


# print eigf_boundary_conditions(Ya,Yb,s,p)

















